// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                String         @id
  username          String         @unique
  email             String         @unique
  password          String
  name              String
  cpf               String         @unique
  birth             String
  phone             String
  pronoun           String
  uf                String
  admin             Boolean        @default(false)
  instagram         String?
  tiktok            String?
  profession        String?
  image             String?        @db.Text
  cover             String?        @db.Text
  bio               String?        @db.Text
  google_id         String?
  google_token      String?        @db.Text
  favorite_creators Creator[]      @relation(name: "favorite_creators")
  favorite_courses  Course[]       @relation(name: "favorite_courses")
  creator           Creator?       @relation(name: "CreatorToUser")
  student           Student?       @relation(name: "StudentToUser")
  role_id           Int            @default(1)
  role              Role           @relation(name: "RoleToUser", fields: [role_id], references: [id], onDelete: Restrict)
  viewed_courses    Course[]       @relation(name: "CourseToUser")
  payment_cards     Paymentcard[]  @relation(name: "PaymentcardToUser")
  lessons_likes     Lesson[]       @relation(name: "LessonToUser")
  lessons_views     Lesson[]       @relation(name: "views-relation")
  lessons_downloads Lesson[]       @relation(name: "downloads-relation")
  plan              PlanContract?  @relation(name: "PlanContractToUser")
  plan_history      ContractLogs[] @relation(name: "ContractLogsToUser")
}

model Role {
  id                     Int                @id @default(autoincrement())
  user                   User[]             @relation(name: "RoleToUser")
  name                   String
  profile_permissions_id String
  profile_permissions    ProfilePermissions @relation(name: "ProfilePermissionsToRole", fields: [profile_permissions_id], references: [id], onDelete: Cascade)
  admin_permissions_id   String
  admin_permissions      AdminPermissions   @relation(name: "AdminPermissionsToRole", fields: [admin_permissions_id], references: [id], onDelete: Cascade)
  general_permissions_id String
  general_permissions    GeneralPermissions @relation(name: "GeneralPermissionsToRole", fields: [general_permissions_id], references: [id], onDelete: Cascade)
}

model Course {
  id           String     @id
  students     Student[]  @relation(name: "CourseToStudent")
  favorited_by User[]     @relation(name: "favorite_courses")
  name         String
  cover        String     @db.Text
  cover_type   CoverType  @default(image)
  published    String
  description  String     @db.Text
  language     String
  recorder     String?
  price        Float
  owner        Creator    @relation(name: "course_owner", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id     String
  gallery_id   String     @unique
  gallery      Gallery    @relation(name: "CourseToGallery", fields: [gallery_id], references: [id], onDelete: Cascade)
  categories   Category[] @relation(name: "CategoryToCourse")
  creators     Creator[]  @relation(name: "CourseToCreator")
  lessons      Lesson[]   @relation(name: "CourseToLesson")
  views        User[]     @relation(name: "CourseToUser")
  chat_id      String?
  chat         Chat?      @relation(name: "ChatToCourse")
}

model Creator {
  id            String     @id
  user_id       String     @unique
  user          User       @relation(name: "CreatorToUser", fields: [user_id], references: [id], onDelete: Cascade)
  favorited_by  User[]     @relation(name: "favorite_creators")
  nickname      String
  language      String
  description   String     @db.Text
  active        Boolean    @default(false)
  image         String?    @db.Text
  cover         String?    @db.Text
  categories    Category[] @relation(name: "CategoryToCreator")
  owned_courses Course[]   @relation(name: "course_owner")
  courses       Course[]   @relation(name: "CourseToCreator")
}

model Student {
  id      String   @id
  courses Course[] @relation(name: "CourseToStudent")
  user_id String   @unique
  user    User     @relation(name: "StudentToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id
  creators Creator[] @relation(name: "CategoryToCreator")
  name     String
  cover    String    @db.Text
  courses  Course[]  @relation(name: "CategoryToCourse")
}

model Lesson {
  id        String  @id
  course_id String
  course    Course  @relation(name: "CourseToLesson", fields: [course_id], references: [id], onDelete: Cascade)
  published String
  name      String
  info      String  @db.Text
  thumb     String  @db.Text
  pdf       String?
  active    Boolean @default(true)
  likes     User[]  @relation(name: "LessonToUser")
  views     User[]  @relation(name: "views-relation")
  downloads User[]  @relation(name: "downloads-relation")
  media_id  String  @unique
  media     Media   @relation(name: "LessonToMedia", fields: [media_id], references: [id], onDelete: Cascade)
}

model Chat {
  id          String    @id
  course_id   String    @unique
  course      Course    @relation(name: "ChatToCourse", fields: [course_id], references: [id], onDelete: Cascade)
  description String?   @db.Text
  media_id    String    @unique
  media       Gallery   @relation(name: "ChatToGallery", fields: [media_id], references: [id], onDelete: Cascade)
  messages    Message[] @relation(name: "ChatToMessage")
}

model Gallery {
  id        String  @id
  course_id String?
  course    Course? @relation(name: "CourseToGallery")
  name      String
  media     Media[] @relation(name: "GalleryToMedia")
  chat_id   String?
  chat      Chat?   @relation(name: "ChatToGallery")
}

model Paymentcard {
  id       Int      @id @default(autoincrement())
  number   String
  owner    String
  validity String
  cvc      String
  type     CardType
  bank     String?
  flag     String?
  user_id  String
  user     User     @relation(name: "PaymentcardToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Media {
  id         String    @id
  url        String
  type       MediaType
  position   Int       @default(1)
  width      Int       @default(1920)
  height     Int       @default(980)
  gallery_id String?
  gallery    Gallery?  @relation(name: "GalleryToMedia", fields: [gallery_id], references: [id], onDelete: Cascade)
  lesson_id  String?
  lesson     Lesson?   @relation(name: "LessonToMedia")
}

model Message {
  id              String  @id
  text            String  @db.Text
  datetime        String
  user_id         String
  video_id        String?
  video_timestamp String?
  chat_id         String
  chat            Chat    @relation(name: "ChatToMessage", fields: [chat_id], references: [id], onDelete: Cascade)
}

model Plan {
  id          Int            @id @default(autoincrement())
  name        String
  price       Float
  duration    String
  description String         @default("")
  contracts   PlanContract[] @relation(name: "PlanToPlanContract")
  logs        ContractLogs[] @relation(name: "ContractLogsToPlan")
}

model PlanContract {
  id         Int    @id @default(autoincrement())
  start_date String
  end_date   String
  paid       Float
  plan_id    Int
  plan_data  Plan   @relation(name: "PlanToPlanContract", fields: [plan_id], references: [id], onDelete: Cascade)
  user_id    String @unique
  user       User   @relation(name: "PlanContractToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model ContractLogs {
  id         Int    @id @default(autoincrement())
  start_date String
  end_date   String
  paid       Float
  user_id    String
  user       User   @relation(name: "ContractLogsToUser", fields: [user_id], references: [id], onDelete: Cascade)
  plan_id    Int
  plan       Plan   @relation(name: "ContractLogsToPlan", fields: [plan_id], references: [id], onDelete: Cascade)
}

model ProfilePermissions {
  id                 String  @id
  roles              Role[]  @relation(name: "ProfilePermissionsToRole")
  viewMembers        Boolean @default(false)
  privacyProfile     Boolean @default(false)
  viewPrivacyProfile Boolean @default(false)
  indexProfile       Boolean @default(false)
}

model AdminPermissions {
  id              String  @id
  roles           Role[]  @relation(name: "AdminPermissionsToRole")
  panelAdm        Boolean @default(false)
  panelCreator    Boolean @default(false)
  createChats     Boolean @default(false)
  deleteComments  Boolean @default(false)
  panelStatistics Boolean @default(false)
  updateUsers     Boolean @default(false)
  deleteUsers     Boolean @default(false)
}

model GeneralPermissions {
  id            String  @id
  roles         Role[]  @relation(name: "GeneralPermissionsToRole")
  editProfile   Boolean @default(false)
  deleteProfile Boolean @default(false)
}

enum CoverType {
  video
  image
}

enum CardType {
  CREDIT
  DEBIT
}

enum MediaType {
  VIDEO
  IMAGE
}
