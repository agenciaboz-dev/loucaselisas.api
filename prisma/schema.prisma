// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                String        @id
  username          String        @unique
  email             String        @unique
  password          String
  name              String
  cpf               String
  birth             String
  phone             String
  pronoun           String
  uf                String
  admin             Boolean       @default(false)
  image             String?       @db.Text
  cover             String?       @db.Text
  bio               String?       @db.Text
  google_id         String?
  google_token      String?       @db.Text
  courses           Course[]      @relation(name: "CourseToUser")
  favorite_creators Creator[]     @relation(name: "favorite_creators")
  favorite_courses  Course[]      @relation(name: "favorite_courses")
  creator           Creator?      @relation(name: "CreatorToUser")
  student           Student?      @relation(name: "StudentToUser")
  role_id           Int           @default(1)
  role              Role          @relation(name: "RoleToUser", fields: [role_id], references: [id], onDelete: Restrict)
  payment_cards     Paymentcard[] @relation(name: "PaymentcardToUser")
}

model Role {
  id                     Int                @id @default(autoincrement())
  user                   User[]             @relation(name: "RoleToUser")
  name                   String
  profile_permissions_id String
  profile_permissions    ProfilePermissions @relation(name: "ProfilePermissionsToRole", fields: [profile_permissions_id], references: [id], onDelete: Cascade)
  admin_permissions_id   String
  admin_permissions      AdminPermissions   @relation(name: "AdminPermissionsToRole", fields: [admin_permissions_id], references: [id], onDelete: Cascade)
  general_permissions_id String
  general_permissions    GeneralPermissions @relation(name: "GeneralPermissionsToRole", fields: [general_permissions_id], references: [id], onDelete: Cascade)
}

model Course {
  id           String    @id
  students     User[]    @relation(name: "CourseToUser")
  favorited_by User[]    @relation(name: "favorite_courses")
  student      Student[] @relation(name: "CourseToStudent")
  creator_id   String
  creator      Creator   @relation(name: "CourseToCreator", fields: [creator_id], references: [id], onDelete: Cascade)
}

model Creator {
  id           String     @id
  user_id      String     @unique
  user         User       @relation(name: "CreatorToUser", fields: [user_id], references: [id], onDelete: Cascade)
  favorited_by User[]     @relation(name: "favorite_creators")
  nickname     String
  language     String
  description  String
  active       Boolean    @default(false)
  categories   Category[] @relation(name: "CategoryToCreator")
  courses      Course[]   @relation(name: "CourseToCreator")
}

model Student {
  id      String   @id
  courses Course[] @relation(name: "CourseToStudent")
  user_id String   @unique
  user    User     @relation(name: "StudentToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id
  creators Creator[] @relation(name: "CategoryToCreator")
  name     String
  cover    String    @db.Text
}

model Paymentcard {
  id       String @id
  number   String
  owner    String
  validity String
  cvc      String
  type     String
  user_id  String
  user     User   @relation(name: "PaymentcardToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model ProfilePermissions {
  id                 String  @id
  roles              Role[]  @relation(name: "ProfilePermissionsToRole")
  viewMembers        Boolean @default(false)
  privacyProfile     Boolean @default(false)
  viewPrivacyProfile Boolean @default(false)
  indexProfile       Boolean @default(false)
}

model AdminPermissions {
  id              String  @id
  roles           Role[]  @relation(name: "AdminPermissionsToRole")
  panelAdm        Boolean @default(false)
  panelCreator    Boolean @default(false)
  createChats     Boolean @default(false)
  deleteComments  Boolean @default(false)
  panelStatistics Boolean @default(false)
  updateUsers     Boolean @default(false)
  deleteUsers     Boolean @default(false)
}

model GeneralPermissions {
  id            String  @id
  roles         Role[]  @relation(name: "GeneralPermissionsToRole")
  editProfile   Boolean @default(false)
  deleteProfile Boolean @default(false)
}
