// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id                String          @id
  username          String          @unique
  email             String          @unique
  created_at        String
  password          String
  name              String
  cpf               String          @unique
  birth             String?
  phone             String
  pronoun           String
  uf                String
  admin             Boolean         @default(false)
  instagram         String?
  tiktok            String?
  profession        String?
  image             String?         @db.Text
  cover             String?         @db.Text
  bio               String?         @db.Text
  expoPushToken     String?         @default("[]") @db.Text
  google_id         String?
  google_token      String?         @db.Text
  favorite_creators Creator[]       @relation(name: "favorite_creators")
  favorite_courses  Course[]        @relation(name: "favorite_courses")
  creator           Creator?        @relation(name: "CreatorToUser")
  student           Student?        @relation(name: "StudentToUser")
  role_id           Int             @default(1)
  role              Role            @relation(name: "RoleToUser", fields: [role_id], references: [id], onDelete: Restrict)
  viewed_courses    CourseView[]    @relation(name: "CourseViewToUser")
  payment_cards     Paymentcard[]   @relation(name: "PaymentcardToUser")
  lessons_views     LessonView[]    @relation(name: "LessonViewToUser")
  lessons_likes     Lesson[]        @relation(name: "LessonToUser")
  lessons_downloads Lesson[]        @relation(name: "downloads-relation")
  lessons_watchtime LessonWatched[] @relation(name: "LessonWatchedToUser")
  messages          Message[]       @relation(name: "MessageToUser")
  plan              PlanContract?   @relation(name: "PlanContractToUser")
  plan_history      ContractLogs[]  @relation(name: "ContractLogsToUser")
  notifications     Notification[]  @relation(name: "NotificationToUser")
}

model Role {
  id             Int         @id @default(autoincrement())
  user           User[]      @relation(name: "RoleToUser")
  courses        Course[]    @relation(name: "CourseToRole")
  name           String
  description    String?     @default("") @db.Text
  permissions_id Int         @unique
  permissions    Permissions @relation(name: "PermissionsToRole", fields: [permissions_id], references: [id], onDelete: Cascade)
}

model Course {
  id              String       @id
  students        Student[]    @relation(name: "CourseToStudent")
  favorited_by    User[]       @relation(name: "favorite_courses")
  name            String
  cover           String       @db.Text
  cover_type      CoverType    @default(image)
  published       String
  description     String       @db.Text
  language        String
  recorder        String?
  price           Float
  owner           Creator      @relation(name: "course_owner", fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id        String
  gallery_id      String       @unique
  gallery         Gallery      @relation(name: "CourseToGallery", fields: [gallery_id], references: [id], onDelete: Cascade)
  categories      Category[]   @relation(name: "CategoryToCourse")
  creators        Creator[]    @relation(name: "CourseToCreator")
  roles           Role[]       @relation(name: "CourseToRole")
  plans           Plan[]       @relation(name: "CourseToPlan")
  lessons         Lesson[]     @relation(name: "CourseToLesson")
  views           CourseView[] @relation(name: "CourseToCourseView")
  chat_id         String?
  chat            Chat?        @relation(name: "ChatToCourse")
  status          CStatus      @default(pending)
  declined_reason String?      @db.Text
}

model Creator {
  id             String     @id
  user_id        String     @unique
  user           User       @relation(name: "CreatorToUser", fields: [user_id], references: [id], onDelete: Cascade)
  favorited_by   User[]     @relation(name: "favorite_creators")
  nickname       String
  language       String
  description    String     @db.Text
  active         Boolean    @default(false)
  image          String?    @db.Text
  cover          String?    @db.Text
  created_at     String     @default("")
  need_send_data Boolean    @default(true)
  categories     Category[] @relation(name: "CategoryToCreator")
  owned_courses  Course[]   @relation(name: "course_owner")
  courses        Course[]   @relation(name: "CourseToCreator")
}

model Student {
  id      String   @id
  courses Course[] @relation(name: "CourseToStudent")
  user_id String   @unique
  user    User     @relation(name: "StudentToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Category {
  id       String    @id
  creators Creator[] @relation(name: "CategoryToCreator")
  name     String
  cover    String    @db.Text
  active   Boolean   @default(true)
  courses  Course[]  @relation(name: "CategoryToCourse")
}

model CourseView {
  id        Int    @id @default(autoincrement())
  datetime  String
  course_id String
  course    Course @relation(name: "CourseToCourseView", fields: [course_id], references: [id], onDelete: Cascade)
  user_id   String
  user      User   @relation(name: "CourseViewToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Plan {
  id          Int            @id @default(autoincrement())
  courses     Course[]       @relation(name: "CourseToPlan")
  name        String
  price       Float
  duration    String
  description String         @default("")
  active      Boolean        @default(true)
  contracts   PlanContract[] @relation(name: "PlanToPlanContract")
  logs        ContractLogs[] @relation(name: "ContractLogsToPlan")
}

model Lesson {
  id              String          @id
  course_id       String
  course          Course          @relation(name: "CourseToLesson", fields: [course_id], references: [id], onDelete: Cascade)
  published       String
  name            String
  info            String          @db.Text
  thumb           String          @db.Text
  pdf             String?
  likes           User[]          @relation(name: "LessonToUser")
  views           LessonView[]    @relation(name: "LessonToLessonView")
  watchedTimes    LessonWatched[] @relation(name: "LessonToLessonWatched")
  downloads       User[]          @relation(name: "downloads-relation")
  media_id        String          @unique
  media           Media           @relation(name: "LessonToMedia", fields: [media_id], references: [id], onDelete: Cascade)
  status          Status          @default(pending)
  declined_reason String?
}

model Chat {
  id          String    @id
  course_id   String    @unique
  course      Course    @relation(name: "ChatToCourse", fields: [course_id], references: [id], onDelete: Cascade)
  description String?   @db.Text
  media_id    String    @unique
  media       Gallery   @relation(name: "ChatToGallery", fields: [media_id], references: [id], onDelete: Cascade)
  messages    Message[] @relation(name: "ChatToMessage")
}

model Gallery {
  id        String  @id
  course_id String?
  course    Course? @relation(name: "CourseToGallery")
  name      String
  media     Media[] @relation(name: "GalleryToMedia")
  chat_id   String?
  chat      Chat?   @relation(name: "ChatToGallery")
}

model Paymentcard {
  id       Int      @id @default(autoincrement())
  number   String
  owner    String
  validity String
  cvc      String
  type     CardType
  bank     String?
  flag     String?
  user_id  String
  user     User     @relation(name: "PaymentcardToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Media {
  id         String    @id
  url        String
  type       MediaType
  position   Int       @default(1)
  duration   Float     @default(0)
  width      Int       @default(1920)
  height     Int       @default(980)
  gallery_id String?
  gallery    Gallery?  @relation(name: "GalleryToMedia", fields: [gallery_id], references: [id], onDelete: Cascade)
  lesson_id  String?
  lesson     Lesson?   @relation(name: "LessonToMedia")
  message    Message?  @relation(name: "MediaToMessage")
}

model LessonWatched {
  id          Int    @id @default(autoincrement())
  watchedTime String
  lesson_id   String
  lesson      Lesson @relation(name: "LessonToLessonWatched", fields: [lesson_id], references: [id], onDelete: Cascade)
  user_id     String
  user        User   @relation(name: "LessonWatchedToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model LessonView {
  id        Int    @id @default(autoincrement())
  datetime  String
  lesson_id String
  lesson    Lesson @relation(name: "LessonToLessonView", fields: [lesson_id], references: [id], onDelete: Cascade)
  user_id   String
  user      User   @relation(name: "LessonViewToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model Message {
  id              String  @id
  text            String  @db.Text
  datetime        String
  deleted         Boolean @default(false)
  user_id         String?
  user            User?   @relation(name: "MessageToUser", fields: [user_id], references: [id], onDelete: SetNull)
  video_id        String?
  video_timestamp String?
  chat_id         String
  chat            Chat    @relation(name: "ChatToMessage", fields: [chat_id], references: [id], onDelete: Cascade)
  media_id        String? @unique
  media           Media?  @relation(name: "MediaToMessage", fields: [media_id], references: [id], onDelete: Cascade)
}

model PlanContract {
  id         Int    @id @default(autoincrement())
  start_date String
  end_date   String
  paid       Float
  plan_id    Int
  plan_data  Plan   @relation(name: "PlanToPlanContract", fields: [plan_id], references: [id], onDelete: Cascade)
  user_id    String @unique
  user       User   @relation(name: "PlanContractToUser", fields: [user_id], references: [id], onDelete: Cascade)
}

model ContractLogs {
  id         Int    @id @default(autoincrement())
  start_date String
  end_date   String
  paid       Float
  user_id    String
  user       User   @relation(name: "ContractLogsToUser", fields: [user_id], references: [id], onDelete: Cascade)
  plan_id    Int
  plan       Plan   @relation(name: "ContractLogsToPlan", fields: [plan_id], references: [id], onDelete: Cascade)
}

model Permissions {
  id           Int     @id @default(autoincrement())
  role_id      Int?
  role         Role?   @relation(name: "PermissionsToRole")
  panelTab     Boolean
  creatorTab   Boolean
  searchTab    Boolean
  favoritesTab Boolean
  configTab    Boolean
}

model Notification {
  id            String  @id
  status        String
  viewed        Boolean @default(false)
  title         String  @default("") @db.Text
  image         String  @default("") @db.Text
  body          String  @db.Text
  datetime      String
  target_route  String
  target_param  String  @db.Text
  user_id       String
  user          User    @relation(name: "NotificationToUser", fields: [user_id], references: [id], onDelete: Cascade)
  expoPushToken String  @db.Text
}

enum CoverType {
  video
  image
}

enum CStatus {
  active
  pending
  disabled
  declined
}

enum CardType {
  CREDIT
  DEBIT
}

enum MediaType {
  video
  image
}

enum Status {
  active
  pending
  disabled
  declined
}
